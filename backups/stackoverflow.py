# -*- coding: utf-8 -*-
"""stackoverflow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXuE1GjtJ8E6gyMSnK5IINaGNsVBeKig

# Import the libraries
"""

import pandas as pd
import matplotlib.pyplot as plt

"""### *Load* the data"""

df = pd.read_csv("/content/drive/MyDrive/survey_results_public.csv")

"""#### print the first 5 lines of the table"""

df.head()

"""#### check info"""

df.info()

"""select the columns

* Country
*   Education level
* yearscodepro
* employment
* ConvertedComp


yearscodepro : NOT including education, how many years have you coded professionally (as a part of your work)?



"""

df = df[["Country", "EdLevel", "YearsCodePro", "Employment", "ConvertedCompYearly"]]

df.head()

"""Drop NAN"""

df = df.dropna()

df.notna().value_counts()

df.info()

"""keep only the people who are employed"""

df["Employment"].value_counts()

"""filter only the full time employess"""

df = df[df["Employment"] == "Employed, full-time"]

df["Employment"].unique()

"""drop employment colums"""

df = df.drop("Employment",axis = 1)

"""check list of countries"""

df["Country"].value_counts()

df.head()

df["Country"].value_counts()

categories = df["Country"].value_counts()
def shorten_catogories(categories ,cutoff):
  categorical_map = {}
  for i in range(len(categories)):
    if categories.values[i] >= cutoff:
      categorical_map[categories.index[i]] = categories.index[i]
    else:
      categorical_map[categories.index[i]] = 'Other'
  return categorical_map

country_map = shorten_catogories(categories,400)

country_map

df["Country"] = df["Country"].map(country_map)

df["Country"].head()

fig, ax = plt.subplots(1,1,figsize=(12,7))

df.boxplot('ConvertedCompYearly', 'Country', ax=ax)
plt.suptitle('Salary vs Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()

"""cutoff the ConvertedCompYearly"""

df = df[df["ConvertedCompYearly"]<= 250000]
df = df[df["ConvertedCompYearly"]>= 10000]
df = df[df["Country"] != 'Other']

fig, ax = plt.subplots(1,1,figsize=(12,7))

df.boxplot('ConvertedCompYearly', 'Country', ax=ax)
plt.suptitle('Salary vs Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()

"""clean up years code pro"""

df["YearsCodePro"].unique()

def clean_exp(x):
  if x == "Less than 1 year":
    return 0.5
  else:
    return float(x)

df["YearsCodePro"] = df["YearsCodePro"].apply(clean_exp)

df["YearsCodePro"].unique()

"""now clean education level"""

df["EdLevel"].value_counts()

def clean_ed(x):
  if "Bachelor’s degree" in x:
    return "Bachelor’s degree"
  if "Master’s degree" in x:
    return "Master’s degree"
  if "Professional degree" in x:
    return "Post Grad"
  if "Bachelor’s degree" in x:
    return "Bachelor’s degree"
  else:
    return "Less than a Degree"

df["EdLevel"] = df["EdLevel"].apply(clean_ed)

df["EdLevel"].value_counts()

df.head()

"""Endcoding"""

from sklearn.preprocessing import LabelEncoder
le_education = LabelEncoder()
df["EdLevel"] = le_education.fit_transform(df["EdLevel"])
df["EdLevel"].unique()

le_country = LabelEncoder()
df["Country"] = le_country.fit_transform(df["Country"])
df["Country"].unique()

"""choose the model"""

from sklearn.linear_model  import LinearRegression
linear_reg = LinearRegression()

"""set x and y"""

X = df.drop("ConvertedCompYearly", axis =1)
y = df["ConvertedCompYearly"]

"""trin the model"""

linear_reg.fit(X,y.values)

"""evaluate the model the value"""

y_pred = linear_reg.predict(X)

from sklearn.metrics import mean_squared_error, mean_absolute_error

import numpy as np

error =  np.sqrt(mean_squared_error(y, y_pred))

error

"""trying out other models"""

from sklearn.tree import DecisionTreeRegressor
dec_tree_reg = DecisionTreeRegressor()
dec_tree_reg.fit(X,y.values)
dec_tree_reg.get_params()

y_pred = dec_tree_reg.predict(X)

error = np.sqrt(mean_squared_error(y, y_pred))

error

"""choosing another model - RandomForestRegressor"""

from sklearn.ensemble import RandomForestRegressor
random_forest_reg = RandomForestRegressor()
random_forest_reg.fit(X,y.values)

y_pred = random_forest_reg.predict(X)

error = np.sqrt(mean_squared_error(y, y_pred))
error

"""using grid search that searches through a model parameters to find the best match for the parameters"""

from sklearn.model_selection import GridSearchCV

max_depth = [None, 2 ,4,6,8,10,12]
parameters = {"max_depth":max_depth }


regressor = DecisionTreeRegressor()
gs = GridSearchCV(regressor, parameters,scoring='neg_mean_squared_error')
gs.fit(X, y.values)

regressor = gs.best_estimator_

regressor.fit(X, y.values)
y_pred = regressor.predict(X)
error = np.sqrt(mean_squared_error(y, y_pred))
error

"""Predict"""

X = np.array([["India","Master’s degree",10]])
X

X[:,0] = le_country.transform(X[:,0])
X[:,1] = le_education.transform(X[:,1])
X = X.astype(float)
X

y_pred = regressor.predict(X)
y_pred

X = np.array([["United States of America","Master’s degree",10]])
X[:,0] = le_country.transform(X[:,0])
X[:,1] = le_education.transform(X[:,1])
X = X.astype(float)
X

y_pred = regressor.predict(X)
y_pred

"""save the model using pickle library"""

import pickle

data = {"model":regressor, "le_country": le_country, "le_education":le_education}
with open('saved_model.pk1', 'wb') as file:
  pickle.dump(data, file)

"""open the saved pickle file to test"""

with open('saved_model.pk1', 'rb') as file:
  data = pickle.load(file)

regressor_loaded =  data["model"]
le_country =  data["le_country"]
le_education =  data["le_education"]

X = np.array([["Germany","Master’s degree",10]])
X[:,0] = le_country.transform(X[:,0])
X[:,1] = le_education.transform(X[:,1])
X = X.astype(float)
X

y_pred = regressor_loaded.predict(X)
y_pred